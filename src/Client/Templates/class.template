{Imports}

namespace {Namespace}
{
    partial class {ClassName} : {InterfaceName}
    {
        private readonly string _handler;
        private readonly HttpClient _client;

        public {ClassName}(HttpClient client)
        {
            _handler = typeof({InterfaceName}).FullName;
            _client = client;
        }

        public Response MakeRequest(string id, string name, Func<Stream, Task> action)
        {
            return MakeRequestAsync(id, name, action).GetAwaiter().GetResult();
        }
        public async Task<Response> MakeRequestAsync(string id, string name, Func<Stream, Task> action)
        {
            var requestUri = name;
            var request = new HttpRequestMessage(HttpMethod.Post, requestUri)
            {
                Content = new MessagePackContent(action)
            };

            request.Headers.Add("X-MethodSignature", id);
            request.Headers.Add("X-MethodHandler", _handler);

            var httpResponse = await _client.SendAsync(request);

            switch (httpResponse.StatusCode)
            {
                case HttpStatusCode.OK:
                    return new Response(new MessagePackStreamReader(await httpResponse.Content.ReadAsStreamAsync()));
                case HttpStatusCode.NotFound:
                    throw new RPCException("Not Found: " + requestUri, null);
                case HttpStatusCode.InternalServerError:
                    throw await CreateExceptionAsync<Exception>(httpResponse);
                default:
                    throw await CreateExceptionAsync<Exception>(httpResponse);
            }
        }
        private async Task<Exception> CreateExceptionAsync<X>(HttpResponseMessage response) where X : Exception
        {
            try
            {
                if (response.StatusCode == HttpStatusCode.InternalServerError)
                {
                    return MessagePackSerializer.Deserialize<X>(await response.Content.ReadAsStreamAsync(), ContractlessStandardResolver.Options.WithCompression(MessagePackCompression.Lz4BlockArray));
                }
                else
                {
                    return new Exception("Unknown response: " + await response.Content.ReadAsStringAsync());
                }
            }
            catch (Exception ex)
            {
                return new RPCException("Could not parse rpc exception", ex)
                {
                    Source = await response.Content.ReadAsStringAsync()
                };
            }
        }

{Methods}
    }
}